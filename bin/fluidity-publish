#!/usr/bin/env python

#    Copyright (C) 2014 Christian T. Jacobs, Alexandros Avdis, Gerard J. Gorman, Matthew D. Piggott.

#    This file is part of PyRDM.

#    PyRDM is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    PyRDM is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with PyRDM.  If not, see <http://www.gnu.org/licenses/>.

import sys, os, glob
import ConfigParser
import optparse
import re

import libspud
import git
from xml.dom import minidom

pyrdm_path = os.path.join(os.path.realpath(os.path.dirname(__file__)), os.pardir)
sys.path.insert(0, pyrdm_path)

from pyrdm.publisher import Publisher

class FluidityPublish:

   def __init__(self, options_file):
      self.options_file = options_file
      return

   def get_fluidity_version(self):
      """ Return the Fluidity version (in the form of the SHA-1 hash of the HEAD of its Git repository). """
      print "Reading SHA-1 hash...\n"
      # NOTE: Here we are assuming that the Fluidity binary is in the same Git repository as the options file. Is there a better way of doing this?
      try:
         repo = git.Repo(sys.argv[-1])
      except:
         print "Could not open the local Git repository. Are you sure that the Fluidity options file is inside a Git repository? Check read permissions?\n"
         return None
         
      # Try to find the version information for the Fluidity binary. This can be found in the version.h file which is written at compile-time.
      try:
         f = open(repo.working_dir + "/include/version.h", "r")
         f.readline()
         f.readline()
         l = f.readline()
         sha = l.split()[-1].replace("\"", "")
         f.close()
      except:
         print "Unable to determine the Fluidity version from the file 'version.h'. Fluidity might not have been compiled yet."
         while True:
            response = raw_input("Do you want to assume that the version of Fluidity you want to publish is the same as the local Git repository's HEAD? (Y/N)\n")
            if(response == "y" or response == "Y"):
               sha = repo.head.commit.hexsha
               return sha
            elif(response == "n" or response == "N"):
               print "Please compile Fluidity and try again, or supply a version (in the form of a SHA-1 hash) using the -v option at the command line.\n"
               sys.exit(1)
            else:
               continue # Keep iterating until the user provides a valid response to the question.
         
      print "SHA-1 hash: %s" % sha
      return sha

   def write_provenance_data(self):
      """ Write the DOIs of the software and input data publications to the .stat file. """
      # Get the path to the stat file.
      simulation_name = libspud.get_option("/simulation_name")
      if(os.path.dirname(sys.argv[-1]) != ""): # If we are in the same directory as the .stat file, then don't add a preceding "/" character.
         stat_path = os.path.dirname(sys.argv[-1]) + "/" + simulation_name + ".stat"

      # The following code is based on fluidity_tools.py:
      try:
         stat = open(stat_path, "r")
      except IOError:
         print "Unable to open the stat file for reading. Perhaps the simulation has not been run yet? Check read permissions?\n"
         return
         
      header_re = re.compile(r"</header>")

      # Get the header.
      xml = ""
      while True:
         line = stat.readline()
         if(line == ""):
            print "Unable to read .stat file header."
            return
         xml = xml + line
         if(re.search(header_re, line)):
            break

      # Get the body.
      body = ""
      while True:
         line = stat.readline()
         if(line == ""):
            break
         body = body + line

      stat.close()

      # Parse the XML
      xml = minidom.parseString(xml)

      # Check that the FLUIDITY_VERSION in the stat file is the same as the published version.
      sha = self.get_fluidity_version()
      for element in xml.getElementsByTagName('constant'):
         if(element.attributes["name"].value == "FluidityVersion"):
            sha_in_statfile = element.attributes["value"].value
            break
      if(libspud.have_option("/publish/software/article_id")):
         if(libspud.get_option("/publish/software/article_id") != self.publisher.find_software("Fluidity", sha_in_statfile)):
            print "The version of Fluidity that created this output data is not the same as the published version of Fluidity.\n"
            while True:
               response = raw_input("Are you sure you want to continue? (Y/N)\n")
               if(response == "y" or response == "Y"):
                  break
               elif(response == "n" or response == "N"):
                  print "Please re-publish the software with the correct version (or re-run the simulation with an updated version) and try again.\n"
                  sys.exit(1)
               else:
                  continue # Keep iterating until the user provides a valid response to the question.

      # Append the provenance data
      provenance_data = {}
      if(libspud.have_option("/publish/software/doi")):
         provenance_data["SoftwareDOI"] = libspud.get_option("/publish/software/doi")
      else:
         provenance_data["SoftwareDOI"] = "Unknown"

      if(libspud.have_option("/publish/input_data/doi")):
         provenance_data["InputDataDOI"] = libspud.get_option("/publish/input_data/doi")
      else:
         provenance_data["InputDataDOI"] = "Unknown"

      elements = xml.getElementsByTagName('constant')
      for key in provenance_data.keys():
         exists = False
         for element in elements:
            if(element.getAttribute("name") == key):
               # Element already exists, so update the value attribute.
               exists = True
               element.setAttribute("value", provenance_data[key])
         if(not exists):
            # Element doesn't exist, so create it.
            element = xml.createElement("constant")
            element.setAttribute("name", key)
            element.setAttribute("type", "string")
            element.setAttribute("value", provenance_data[key])
            xml.childNodes[0].insertBefore(xml.createTextNode("\n"), xml.childNodes[0].childNodes[3]) # Add a new line
            xml.childNodes[0].insertBefore(element, xml.childNodes[0].childNodes[3]) # Append the provenance data

      # Write the changes to the stat file.
      header = xml.toprettyxml(newl="", indent="")
      header = header.replace("<?xml version=\"1.0\" ?>", "")
      
      try:
         stat = open(stat_path, "w")
         stat.write(header + "\n" + body)
         stat.close()
      except IOError:
         print "Unable to write to the stat file. Check permissions?\n"
         return

      return

   def get_category_id(self, category_name):
      categories_list = self.publisher.figshare.get_categories()["items"]
      category_id = None
      for category in categories_list:
         if(category["name"] == category_name):
            category_id = category["id"]
            break
      if(category_id is None):
         print "Warning: Could not find the category '%s'! The publication cannot be made public until a category is added." % category_name
      return category_id

   def publish(self, data_type, version=None, private=False):
      """ Publish the Fluidity source code or simulation data. """
      libspud.load_options(self.options_file)    

      if(not libspud.have_option("/publish")):
         print "Error: Publishing has not been enabled in the simulation's configuration file. Please enable it and try again.\n"
         sys.exit(1)

      service = libspud.get_option("/publish/service")
      self.publisher = Publisher(service=service)

      if(data_type == "s"):
         # Publish the software
         
         # Get the SHA-1 hash of the software version.
         if(version is None):
            sha = self.get_fluidity_version()
            if(sha is None):
               print "Could not obtain the version (SHA-1 hash) of the Fluidity binary. If it is not in the 'version.h' file, then please use the -v option to specify it.\n"
               sys.exit(1)
         else:
            print "Using the software version provided: %s" % version
            sha = version

         # Search for the software, in case it has already been published.
         article_id, doi = self.publisher.find_software("Fluidity", sha)
         
         options_path = "/publish/software/"
         if(article_id is None):
            # Software is not published already, so publish it now.
            publication_details = self.publisher.publish_software(software_name="Fluidity", software_sha=sha, software_local_repo_location=sys.argv[-1], 
                                                                  category_id=self.get_category_id("Computational Physics"), private=private)
            try:
               libspud.set_option(options_path + "/article_id", str(publication_details["article_id"]))
               libspud.set_option(options_path + "/doi", str(publication_details["doi"]))
            except:
               pass # Ignore any SPUD_NEW_KEY_WARNING warnings
         else:
            print "This version of Fluidity has already been published. Re-using the article_id (%s) and DOI (%s)...\n" % (str(article_id), str(doi))
            try:
               libspud.set_option(options_path + "/article_id", str(article_id))
               if(doi is not None):
                  libspud.set_option(options_path + "/doi", str(doi))
            except:
               pass # Ignore any SPUD_NEW_KEY_WARNING warnings
               
         libspud.write_options(self.options_file)
            
      else:
         # Publish the input/output data
         if(data_type == "i"):
            options_path = "/publish/input_data/"
         elif(data_type == "o"):
            options_path = "/publish/output_data/"
         else:
            print "Data type not recognised."
            sys.exit(1)
            
         if(libspud.have_option(options_path + "/article_id")):
            article_id = libspud.get_option(options_path + "/article_id")
            print "Re-using fileset with article_id %s..." % str(article_id)
         else:
            article_id = None

         # A list of paths to files that the user wants published.
         temp = eval(libspud.get_option(options_path + "/files"))
         # Change the file paths to be relative to the directory where the options file is stored.
         for i in range(len(temp)):
            if(os.path.dirname(sys.argv[-1]) != ""):
               temp[i] = os.path.dirname(sys.argv[-1]) + "/" + temp[i]

         files = []
         for i in range(len(temp)):
            if("*" in os.path.basename(temp[i])):
               # Expand out any wildcard expressions.
               expanded = glob.glob(temp[i])
               for j in range(len(expanded)):
                  files.append(expanded[j])
            else:
               files.append(temp[i])

         if(data_type == "o"):
            # Write provenance data to the stat file.
            print "Writing provenance data to .stat file..."
            self.write_provenance_data()

         tags = [libspud.get_option("/simulation_name"), "Fluidity", "simulation"]
         if(data_type == "i"):
            title = "Input data files for simulation: %s" % libspud.get_option("/simulation_name")
            tags.append("input data")
         elif(data_type == "o"):
            title = "Output data files for simulation: %s" % libspud.get_option("/simulation_name")
            tags.append("output data")

         parameters = {"title":title, "description":title, "files":files, "category_id":self.get_category_id("Computational Physics"), "tag_name":tags}
         publication_details = self.publisher.publish_data(parameters, article_id=article_id, private=private)

         # Write the article_id and DOI to the options file for next time.
         if(article_id is None):
            try:
               libspud.set_option(options_path + "/article_id", str(publication_details["article_id"]))
            except:
               pass # Ignore any SPUD_NEW_KEY_WARNING warnings
            try:
               libspud.set_option(options_path + "/doi", str(publication_details["doi"]))
            except:
               pass # Ignore any SPUD_NEW_KEY_WARNING warnings
            libspud.write_options(self.options_file)

      print "Finished publishing."
      return
         
if(__name__ == "__main__"):
   # Parse the command line arguments
   usage = "Usage: %prog [options] path_to_options_file"
   parser = optparse.OptionParser(usage=usage)
   parser.add_option("-s", "--software", help="Publish the Fluidity source code.", action="store_true", default=False)
   parser.add_option("-i", "--input", help="Publish the input data files whose paths are specified in the options file.", action="store_true", default=False)
   parser.add_option("-o", "--output", help="Publish the output data files whose paths are specified in the options file.", action="store_true", default=False)
   parser.add_option("-v", "--version", help="Publish a specific version of the Fluidity source code identified by a given SHA-1 hash. Must be used in conjunction with the -s option.", action="store", type="string", default=None, metavar="HASH")
   parser.add_option("-p", "--private", help="Publish the software or data, but keep it private. Note that any DOI generated will not be valid until the publication is made public.", action="store_true", default=False)
   (options, args) = parser.parse_args()
   
   # The data the user wants to publish (software, input data, or output data)
   if(options.software):
      data_type = "s"
   elif(options.input):
      data_type = "i"
   elif(options.output):
      data_type = "o"
   else:
      print "You need to specify what you would like to publish: software, input data, or output data.\n"
      parser.print_help()
      sys.exit(1)
      
   rdm = FluidityPublish(options_file = sys.argv[-1])
   rdm.publish(data_type = data_type, version = options.version, private=options.private)
   
