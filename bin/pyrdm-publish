#!/usr/bin/env python

#    Copyright (C) 2014 Christian T. Jacobs, Alexandros Avdis, Gerard J. Gorman, Matthew D. Piggott.

#    This file is part of PyRDM.

#    PyRDM is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    PyRDM is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with PyRDM.  If not, see <http://www.gnu.org/licenses/>.

import ConfigParser
import glob
import logging
import optparse
import os
import re
import sys

import git
from xml.dom import minidom
pyrdm_path = os.path.join(os.path.realpath(os.path.dirname(__file__)), os.pardir)
sys.path.insert(0, pyrdm_path)

import pyrdm
from pyrdm.publisher import Publisher


_LOG = logging.getLogger(__name__)
_HANDLER = logging.StreamHandler()
_LOG.addHandler(_HANDLER)
_HANDLER.setFormatter(logging.Formatter(
    '%(module)s %(levelname)s: %(message)s'))
del(_HANDLER)
_LOG.setLevel(logging.ERROR)


class PyRDMPublish:

   def __init__(self, location):
      self.location = location
      return

   def get_pyrdm_version(self):
      """ Return the PyRDM version (in the form of the SHA-1 hash of the HEAD of its Git repository). """
      _LOG.debug("Reading SHA-1 hash...")
      try:
         repo = git.Repo(self.location)
      except:
         _LOG.warning("Could not open the local Git repository. Check read permissions?")
         return None
      sha = repo.head.commit.hexsha
      _LOG.debug("SHA-1 hash: %s" % sha)
      return sha

   def get_category_id(self, category_name):
      categories_list = self.publisher.figshare.get_categories()["items"]
      category_id = None
      for category in categories_list:
         if(category["name"] == category_name):
            category_id = category["id"]
            break
      if(category_id is None):
         _LOG.warning("Could not find the category '%s'! The publication cannot be made public until a category is added." % category_name)
      return category_id

   def publish(self, version=None, private=False):
      """ Publish the PyRDM source code. """

      self.publisher = Publisher(service="figshare")

      # Publish the software
         
      # Get the SHA-1 hash of the software version.
      if(version is None):
         sha = self.get_pyrdm_version()
         if(sha is None):
            _LOG.error("Could not obtain the version (SHA-1 hash) of PyRDM. Please use the -v option to specify it.")
            sys.exit(1)
      else:
         _LOG.info("Using the software version provided: %s" % version)
         sha = version

      # Search for the software, in case it has already been published.
      article_id, doi = self.publisher.find_software("PyRDM", sha)
         
      if(article_id is None):
         # Software is not published already, so publish it now.
         publication_details = self.publisher.publish_software(software_name="PyRDM", software_sha=sha, software_local_repo_location=sys.argv[-1], 
                                                               category_id=self.get_category_id("Computer Software"), private=private)
         _LOG.info("Published PyRDM. Figshare publication ID: %d, DOI: %s" % (publication_details["article_id"], str(publication_details["doi"])))
      else:
         _LOG.info("This version of PyRDM has already been published. Re-using the article_id (%d) and DOI (%s)...\n" % (article_id, str(doi)))
   
      _LOG.info("Finished publishing.")
      return
         
if(__name__ == "__main__"):
   # Parse the command line arguments
   usage = "Usage: %prog [options] path_to_local_pyrdm_git_repository"
   parser = optparse.OptionParser(usage=usage)
   parser.add_option("-v", "--version", help="Publish a specific version of the PyRDM source code identified by a given SHA-1 hash.", action="store", type="string", default=None, metavar="HASH")
   parser.add_option(
      "-l", "--log-level", action="store", type="choice", metavar="LEVEL",
      default=None, choices=['critical', 'error', 'warning', 'info', 'debug'],
      help=("Log verbosity.  Defaults to %s" % (
         logging.getLevelName(pyrdm.LOG.level).lower())))

   (options, args) = parser.parse_args()
   
   if options.log_level:
      level = getattr(logging, options.log_level.upper())
      pyrdm.LOG.setLevel(level)
      _LOG.setLevel(level)

   if(len(sys.argv) <= 1):
      print "You need to provide the path to the local Git repository of PyRDM in order to publish it.\n"
      parser.print_help()
      sys.exit(1)
   
   rdm = PyRDMPublish(location = sys.argv[-1])
   rdm.publish(version = options.version, private=True)
   
